<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>集成学习</title>
      <link href="/2020/08/22/ji-cheng-xue-xi/"/>
      <url>/2020/08/22/ji-cheng-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="集成方法-ensemble-method（元算法-meta-algorithm）-概述"><a href="#集成方法-ensemble-method（元算法-meta-algorithm）-概述" class="headerlink" title="集成方法: ensemble method（元算法: meta algorithm） 概述"></a>集成方法: ensemble method（元算法: meta algorithm） 概述</h2><ul><li><p>概念：是对其他算法进行组合的一种形式。</p></li><li><p>通俗来说： 当做重要决定时，大家可能都会考虑吸取多个专家而不只是一个人的意见。<br>  机器学习处理问题时又何尝不是如此？ 这就是集成方法背后的思想。</p></li><li><p>集成方法：  </p><ol><li>投票选举(bagging: 自举汇聚法 bootstrap aggregating): 是基于数据随机重抽样分类器构造的方法</li><li>再学习(boosting): 是基于所有分类器的加权求和的方法</li></ol></li></ul><h2 id="集成方法-场景"><a href="#集成方法-场景" class="headerlink" title="集成方法 场景"></a>集成方法 场景</h2><p>目前 bagging 方法最流行的版本是: 随机森林(random forest)<br>选男友：美女选择择偶对象的时候，会问几个闺蜜的建议，最后选择一个综合得分最高的一个作为男朋友</p><p>目前 boosting 方法最流行的版本是: AdaBoost<br>追女友：3个帅哥追同一个美女，第1个帅哥失败-&gt;(传授经验：姓名、家庭情况) 第2个帅哥失败-&gt;(传授经验：兴趣爱好、性格特点) 第3个帅哥成功</p><blockquote><p>bagging 和 boosting 区别是什么？</p></blockquote><ol><li>bagging 是一种与 boosting 很类似的技术, 所使用的多个分类器的类型（数据量和特征量）都是一致的。</li><li>bagging 是由不同的分类器（1.数据随机化 2.特征随机化）经过训练，综合得出的出现最多分类结果；boosting 是通过调整已有分类器错分的那些数据来获得新的分类器，得出目前最优的结果。</li><li>bagging 中的分类器权重是相等的；而 boosting 中的分类器加权求和，所以权重并不相等，每个权重代表的是其对应分类器在上一轮迭代中的成功度。</li></ol><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><h3 id="随机森林-概述"><a href="#随机森林-概述" class="headerlink" title="随机森林 概述"></a>随机森林 概述</h3><ul><li>随机森林指的是利用多棵树对样本进行训练并预测的一种分类器。</li><li>决策树相当于一个大师，通过自己在数据集中学到的知识用于新数据的分类。但是俗话说得好，一个诸葛亮，玩不过三个臭皮匠。随机森林就是希望构建多个臭皮匠，希望最终的分类效果能够超过单个大师的一种算法。</li></ul><h3 id="随机森林-原理"><a href="#随机森林-原理" class="headerlink" title="随机森林 原理"></a>随机森林 原理</h3><p>那随机森林具体如何构建呢？<br>有两个方面：</p><ol><li>数据的随机性化</li><li>待选特征的随机化</li></ol><p>使得随机森林中的决策树都能够彼此不同，提升系统的多样性，从而提升分类性能。</p><blockquote><p>数据的随机化：使得随机森林中的决策树更普遍化一点，适合更多的场景。</p></blockquote><p>（有放回的准确率在：70% 以上， 无放回的准确率在：60% 以上）</p><ol><li>采取有放回的抽样方式 构造子数据集，保证不同子集之间的数量级一样（不同子集／同一子集 之间的元素可以重复）</li><li>利用子数据集来构建子决策树，将这个数据放到每个子决策树中，每个子决策树输出一个结果。</li><li>然后统计子决策树的投票结果，得到最终的分类 就是 随机森林的输出结果。</li><li>如下图，假设随机森林中有3棵子决策树，2棵子树的分类结果是A类，1棵子树的分类结果是B类，那么随机森林的分类结果就是A类。</li></ol><p><img src="1.jpg" alt="数据重抽样"></p><blockquote><p>待选特征的随机化</p></blockquote><ol><li>子树从所有的待选特征中随机选取一定的特征。</li><li>在选取的特征中选取最优的特征。</li></ol><p>下图中，蓝色的方块代表所有可以被选择的特征，也就是目前的待选特征；黄色的方块是分裂特征。<br><br>左边是一棵决策树的特征选取过程，通过在待选特征中选取最优的分裂特征（别忘了前文提到的ID3算法，C4.5算法，CART算法等等），完成分裂。<br><br>右边是一个随机森林中的子树的特征选取过程。<br></p><p><img src="2.jpg" alt="特征重抽样"></p><blockquote><p>随机森林 开发流程</p></blockquote><pre><code>收集数据：任何方法准备数据：转换样本集分析数据：任何方法训练算法：通过数据随机化和特征随机化，进行多实例的分类评估测试算法：计算错误率使用算法：输入样本数据，然后运行 随机森林 算法判断输入数据分类属于哪个分类，最后对计算出的分类执行后续处理</code></pre><blockquote><p>随机森林 算法特点</p></blockquote><pre><code>优点：几乎不需要输入准备、可实现隐式特征选择、训练速度非常快、其他模型很难超越、很难建立一个糟糕的随机森林模型、大量优秀、免费以及开源的实现。缺点：劣势在于模型大小、是个很难去解释的黑盒子。适用数据范围：数值型和标称型</code></pre><h3 id="项目案例-声纳信号分类"><a href="#项目案例-声纳信号分类" class="headerlink" title="项目案例: 声纳信号分类"></a>项目案例: 声纳信号分类</h3><h4 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h4><p>这是 Gorman 和 Sejnowski 在研究使用神经网络的声纳信号分类中使用的数据集。任务是训练一个模型来区分声纳信号。</p><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><pre><code>收集数据：提供的文本文件准备数据：转换样本集分析数据：手工检查数据训练算法：在数据上，利用 random_forest() 函数进行优化评估，返回模型的综合分类结果测试算法：在采用自定义 n_folds 份随机重抽样 进行测试评估，得出综合的预测评分使用算法：若你感兴趣可以构建完整的应用程序，从案例进行封装，也可以参考我们的代码</code></pre><blockquote><p>收集数据：提供的文本文件</p></blockquote><p>样本数据：sonar-all-data.txt</p><pre><code>0.02,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.066,0.2273,0.31,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.555,0.6711,0.6415,0.7104,0.808,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.051,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.018,0.0084,0.009,0.0032,R0.0453,0.0523,0.0843,0.0689,0.1183,0.2583,0.2156,0.3481,0.3337,0.2872,0.4918,0.6552,0.6919,0.7797,0.7464,0.9444,1,0.8874,0.8024,0.7818,0.5212,0.4052,0.3957,0.3914,0.325,0.32,0.3271,0.2767,0.4423,0.2028,0.3788,0.2947,0.1984,0.2341,0.1306,0.4182,0.3835,0.1057,0.184,0.197,0.1674,0.0583,0.1401,0.1628,0.0621,0.0203,0.053,0.0742,0.0409,0.0061,0.0125,0.0084,0.0089,0.0048,0.0094,0.0191,0.014,0.0049,0.0052,0.0044,R0.0262,0.0582,0.1099,0.1083,0.0974,0.228,0.2431,0.3771,0.5598,0.6194,0.6333,0.706,0.5544,0.532,0.6479,0.6931,0.6759,0.7551,0.8929,0.8619,0.7974,0.6737,0.4293,0.3648,0.5331,0.2413,0.507,0.8533,0.6036,0.8514,0.8512,0.5045,0.1862,0.2709,0.4232,0.3043,0.6116,0.6756,0.5375,0.4719,0.4647,0.2587,0.2129,0.2222,0.2111,0.0176,0.1348,0.0744,0.013,0.0106,0.0033,0.0232,0.0166,0.0095,0.018,0.0244,0.0316,0.0164,0.0095,0.0078,R</code></pre><blockquote><p>准备数据：转换样本集</p></blockquote><pre class=" language-cpp"><code class="language-cpp"># 导入csv文件def <span class="token function">loadDataSet</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token operator">:</span>    dataset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    with <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> as fr<span class="token operator">:</span>        <span class="token keyword">for</span> line in fr<span class="token punctuation">.</span><span class="token function">readlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token operator">:</span>                <span class="token keyword">continue</span>            lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> featrue in line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token macro property"># strip()返回移除字符串头尾指定的字符生成的新字符串</span>                str_f <span class="token operator">=</span> featrue<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> str_f<span class="token punctuation">.</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> # 判断是否是数字                    # 将数据集的第column列转换成<span class="token keyword">float</span>形式                    lineArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">(</span>str_f<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token operator">:</span>                    # 添加分类标签                    lineArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str_f<span class="token punctuation">)</span>            dataset<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">)</span>    <span class="token keyword">return</span> dataset</code></pre><blockquote><p>分析数据：手工检查数据</p></blockquote><blockquote><p>训练算法：在数据上，利用 random_forest() 函数进行优化评估，返回模型的综合分类结果</p></blockquote><ul><li>样本数据随机无放回抽样-用于交叉验证</li></ul><pre class=" language-cpp"><code class="language-cpp">def <span class="token function">cross_validation_split</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> n_folds<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token string">""</span>"<span class="token function">cross_validation_split</span><span class="token punctuation">(</span>将数据集进行抽重抽样 n_folds 份，数据可以重复抽取<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        dataset     原始数据集        n_folds     数据集dataset分成n_flods份    Returns<span class="token operator">:</span>        dataset_split    list集合，存放的是：将数据集进行抽重抽样 n_folds 份，数据可以重复抽取    <span class="token string">""</span>"    dataset_split <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dataset_copy <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>       # 复制一份 dataset<span class="token punctuation">,</span>防止 dataset 的内容改变    fold_size <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token operator">/</span> n_folds    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n_folds<span class="token punctuation">)</span><span class="token operator">:</span>        fold <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  # 每次循环 fold 清零，防止重复导入 dataset_split        <span class="token keyword">while</span> <span class="token function">len</span><span class="token punctuation">(</span>fold<span class="token punctuation">)</span> <span class="token operator">&lt;</span> fold_size<span class="token operator">:</span>   # 这里不能用 <span class="token keyword">if</span>，<span class="token keyword">if</span> 只是在第一次判断时起作用，<span class="token keyword">while</span> 执行循环，直到条件不成立 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span># 有放回的随机采样，有一些样本被重复采样，从而在训练集中多次出现，有的则从未在训练集中出现，此为自助采样法。从而保证每棵决策树训练集的差异性 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token function">randrange</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dataset_copy<span class="token punctuation">)</span><span class="token punctuation">)</span>            # 将对应索引 index 的内容从 dataset_copy 中导出，并将该内容从 dataset_copy 中删除。            <span class="token macro property"># pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</span>            fold<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dataset_copy<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>  # 无放回的方式            <span class="token macro property"># fold.append(dataset_copy[index])  # 有放回的方式</span>        dataset_split<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fold<span class="token punctuation">)</span>    # 由dataset分割出的n_folds个数据构成的列表，为了用于交叉验证    <span class="token keyword">return</span> dataset_split</code></pre><ul><li>训练数据集随机化</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property"># Create a random subsample from the dataset with replacement</span>def <span class="token function">subsample</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> ratio<span class="token punctuation">)</span><span class="token operator">:</span>   # 创建数据集的随机子样本    <span class="token string">""</span>"<span class="token function">random_forest</span><span class="token punctuation">(</span>评估算法性能，返回模型得分<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        dataset         训练数据集        ratio           训练数据集的样本比例    Returns<span class="token operator">:</span>        sample          随机抽样的训练样本    <span class="token string">""</span>"    sample <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    # 训练样本的按比例抽样。    <span class="token macro property"># round() 方法返回浮点数x的四舍五入值。</span>    n_sample <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token function">len</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n_sample<span class="token operator">:</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span># 有放回的随机采样，有一些样本被重复采样，从而在训练集中多次出现，有的则从未在训练集中出现，此为自助采样法。从而保证每棵决策树训练集的差异性        index <span class="token operator">=</span> <span class="token function">randrange</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>        sample<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sample</code></pre><ul><li>特征随机化</li></ul><pre class=" language-cpp"><code class="language-cpp"># 找出分割数据集的最优特征，得到最优的特征 index，特征值 row<span class="token punctuation">[</span>index<span class="token punctuation">]</span>，以及分割完的数据 groups（left<span class="token punctuation">,</span> right）def <span class="token function">get_split</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> n_features<span class="token punctuation">)</span><span class="token operator">:</span>    class_values <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token function">set</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> row in dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>  # class_values <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    b_index<span class="token punctuation">,</span> b_value<span class="token punctuation">,</span> b_score<span class="token punctuation">,</span> b_groups <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> None    features <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token function">len</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n_features<span class="token operator">:</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>index <span class="token operator">=</span> <span class="token function">randrange</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  # 往 features 添加 n_features 个特征（ n_feature 等于特征数的个数），特征索引从 dataset 中随机取        <span class="token keyword">if</span> index <span class="token operator">not</span> in features<span class="token operator">:</span>            features<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">for</span> index in features<span class="token operator">:</span>                    # 在 n_features 个特征中选出最优的特征索引，并没有遍历所有特征，从而保证了每课决策树的差异性        <span class="token keyword">for</span> row in dataset<span class="token operator">:</span>            groups <span class="token operator">=</span> <span class="token function">test_split</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> dataset<span class="token punctuation">)</span>  # groups<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span>index<span class="token punctuation">]</span> 遍历每一行 index 索引下的特征值作为分类值 value<span class="token punctuation">,</span> 找出最优的分类特征和特征值            gini <span class="token operator">=</span> <span class="token function">gini_index</span><span class="token punctuation">(</span>groups<span class="token punctuation">,</span> class_values<span class="token punctuation">)</span>            # 左右两边的数量越一样，说明数据区分度不高，gini系数越大            <span class="token keyword">if</span> gini <span class="token operator">&lt;</span> b_score<span class="token operator">:</span>                b_index<span class="token punctuation">,</span> b_value<span class="token punctuation">,</span> b_score<span class="token punctuation">,</span> b_groups <span class="token operator">=</span> index<span class="token punctuation">,</span> row<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> gini<span class="token punctuation">,</span> groups  # 最后得到最优的分类特征 b_index<span class="token punctuation">,</span>分类特征值 b_value<span class="token punctuation">,</span>分类结果 b_groups。b_value 为分错的代价成本    <span class="token macro property"># print b_score</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'index'</span><span class="token operator">:</span> b_index<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token operator">:</span> b_value<span class="token punctuation">,</span> <span class="token string">'groups'</span><span class="token operator">:</span> b_groups<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>随机森林</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property"># Random Forest Algorithm</span>def <span class="token function">random_forest</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">,</span> max_depth<span class="token punctuation">,</span> min_size<span class="token punctuation">,</span> sample_size<span class="token punctuation">,</span> n_trees<span class="token punctuation">,</span> n_features<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token string">""</span>"<span class="token function">random_forest</span><span class="token punctuation">(</span>评估算法性能，返回模型得分<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        train           训练数据集        test            测试数据集        max_depth       决策树深度不能太深，不然容易导致过拟合        min_size        叶子节点的大小        sample_size     训练数据集的样本比例        n_trees         决策树的个数        n_features      选取的特征的个数    Returns<span class="token operator">:</span>        predictions     每一行的预测结果，bagging 预测最后的分类结果    <span class="token string">""</span>"    trees <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token macro property"># n_trees 表示决策树的数量</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>n_trees<span class="token punctuation">)</span><span class="token operator">:</span>        # 随机抽样的训练样本， 随机采样保证了每棵决策树训练集的差异性        sample <span class="token operator">=</span> <span class="token function">subsample</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> sample_size<span class="token punctuation">)</span>        # 创建一个决策树        tree <span class="token operator">=</span> <span class="token function">build_tree</span><span class="token punctuation">(</span>sample<span class="token punctuation">,</span> max_depth<span class="token punctuation">,</span> min_size<span class="token punctuation">,</span> n_features<span class="token punctuation">)</span>        trees<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>    # 每一行的预测结果，bagging 预测最后的分类结果    predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">bagging_predict</span><span class="token punctuation">(</span>trees<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token keyword">for</span> row in test<span class="token punctuation">]</span>    <span class="token keyword">return</span> predictions</code></pre><blockquote><p>测试算法：在采用自定义 n_folds 份随机重抽样 进行测试评估，得出综合的预测评分。</p></blockquote><ul><li>计算随机森林的预测结果的正确率</li></ul><pre class=" language-cpp"><code class="language-cpp"># 评估算法性能，返回模型得分def <span class="token function">evaluate_algorithm</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> algorithm<span class="token punctuation">,</span> n_folds<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token string">""</span>"<span class="token function">evaluate_algorithm</span><span class="token punctuation">(</span>评估算法性能，返回模型得分<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        dataset     原始数据集        algorithm   使用的算法        n_folds     数据的份数        <span class="token operator">*</span>args       其他的参数    Returns<span class="token operator">:</span>        scores      模型得分    <span class="token string">""</span>"    # 将数据集进行随机抽样，分成 n_folds 份，数据无重复的抽取    folds <span class="token operator">=</span> <span class="token function">cross_validation_split</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> n_folds<span class="token punctuation">)</span>    scores <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    # 每次循环从 folds 从取出一个 fold 作为测试集，其余作为训练集，遍历整个 folds ，实现交叉验证    <span class="token keyword">for</span> fold in folds<span class="token operator">:</span>        train_set <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>folds<span class="token punctuation">)</span>        train_set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fold<span class="token punctuation">)</span>        # 将多个 fold 列表组合成一个 train_set 列表<span class="token punctuation">,</span> 类似 <span class="token keyword">union</span> all        <span class="token string">""</span>"        In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">:</span> l1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">:</span> l2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">:</span> l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">:</span> l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">:</span> l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>        In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">:</span> l        Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token string">""</span>"        train_set <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        test_set <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token macro property"># fold 表示从原始数据集 dataset 提取出来的测试集</span>        <span class="token keyword">for</span> row in fold<span class="token operator">:</span>            row_copy <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>            row_copy<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> None             test_set<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>row_copy<span class="token punctuation">)</span>        predicted <span class="token operator">=</span> <span class="token function">algorithm</span><span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> test_set<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>        actual <span class="token operator">=</span> <span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> row in fold<span class="token punctuation">]</span>        # 计算随机森林的预测结果的正确率        accuracy <span class="token operator">=</span> <span class="token function">accuracy_metric</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> predicted<span class="token punctuation">)</span>        scores<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>accuracy<span class="token punctuation">)</span>    <span class="token keyword">return</span> scores</code></pre><blockquote><p>使用算法：若你感兴趣可以构建完整的应用程序，从案例进行封装，也可以参考我们的代码</p></blockquote><p><a href="https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.RandomForest/randomForest.py">完整代码地址</a>: <a href="https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.RandomForest/randomForest.py">https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.RandomForest/randomForest.py</a></p><h2 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h2><h3 id="AdaBoost-adaptive-boosting-自适应-boosting-概述"><a href="#AdaBoost-adaptive-boosting-自适应-boosting-概述" class="headerlink" title="AdaBoost (adaptive boosting: 自适应 boosting) 概述"></a>AdaBoost (adaptive boosting: 自适应 boosting) 概述</h3><p><code>能否使用弱分类器和多个实例来构建一个强分类器？ 这是一个非常有趣的理论问题。</code></p><h3 id="AdaBoost-原理"><a href="#AdaBoost-原理" class="headerlink" title="AdaBoost 原理"></a>AdaBoost 原理</h3><blockquote><p>AdaBoost 工作原理</p></blockquote><p><img src="3.png" alt="AdaBoost 工作原理" title="AdaBoost 工作原理"></p><blockquote><p>AdaBoost 开发流程</p></blockquote><pre><code>收集数据：可以使用任意方法准备数据：依赖于所使用的弱分类器类型，本章使用的是单层决策树，这种分类器可以处理任何数据类型。    当然也可以使用任意分类器作为弱分类器，第2章到第6章中的任一分类器都可以充当弱分类器。    作为弱分类器，简单分类器的效果更好。分析数据：可以使用任意方法。训练算法：AdaBoost 的大部分时间都用在训练上，分类器将多次在同一数据集上训练弱分类器。测试算法：计算分类的错误率。使用算法：通SVM一样，AdaBoost 预测两个类别中的一个。如果想把它应用到多个类别的场景，那么就要像多类 SVM 中的做法一样对 AdaBoost 进行修改。</code></pre><blockquote><p>AdaBoost 算法特点</p></blockquote><pre><code>* 优点：泛化（由具体的、个别的扩大为一般的）错误率低，易编码，可以应用在大部分分类器上，无参数调节。* 缺点：对离群点敏感。* 适用数据类型：数值型和标称型数据。</code></pre><h3 id="项目案例-马疝病的预测"><a href="#项目案例-马疝病的预测" class="headerlink" title="项目案例: 马疝病的预测"></a>项目案例: 马疝病的预测</h3><blockquote><p>项目流程图</p></blockquote><p><img src="4.jpg" alt="AdaBoost代码流程图" title="AdaBoost代码流程图"></p><p>基于单层决策树构建弱分类器</p><ul><li>单层决策树(decision stump, 也称决策树桩)是一种简单的决策树。</li></ul><h4 id="项目概述-1"><a href="#项目概述-1" class="headerlink" title="项目概述"></a>项目概述</h4><p>预测患有疝气病的马的存活问题，这里的数据包括368个样本和28个特征，疝气病是描述马胃肠痛的术语，然而，这种病并不一定源自马的胃肠问题，其他问题也可能引发疝气病，该数据集中包含了医院检测马疝气病的一些指标，有的指标比较主观，有的指标难以测量，例如马的疼痛级别。另外，除了部分指标主观和难以测量之外，该数据还存在一个问题，数据集中有30%的值是缺失的。</p><h4 id="开发流程-1"><a href="#开发流程-1" class="headerlink" title="开发流程"></a>开发流程</h4><pre><code>收集数据：提供的文本文件准备数据：确保类别标签是+1和-1，而非1和0分析数据：统计分析训练算法：在数据上，利用 adaBoostTrainDS() 函数训练出一系列的分类器测试算法：我们拥有两个数据集。在不采用随机抽样的方法下，我们就会对 AdaBoost 和 Logistic 回归的结果进行完全对等的比较使用算法：观察该例子上的错误率。不过，也可以构建一个 Web 网站，让驯马师输入马的症状然后预测马是否会死去</code></pre><blockquote><p>收集数据：提供的文本文件</p></blockquote><p>训练数据：horseColicTraining.txt<br>测试数据：horseColicTest.txt</p><pre><code>2.000000    1.000000    38.500000    66.000000    28.000000    3.000000    3.000000    0.000000    2.000000    5.000000    4.000000    4.000000    0.000000    0.000000    0.000000    3.000000    5.000000    45.000000    8.400000    0.000000    0.000000    -1.0000001.000000    1.000000    39.200000    88.000000    20.000000    0.000000    0.000000    4.000000    1.000000    3.000000    4.000000    2.000000    0.000000    0.000000    0.000000    4.000000    2.000000    50.000000    85.000000    2.000000    2.000000    -1.0000002.000000    1.000000    38.300000    40.000000    24.000000    1.000000    1.000000    3.000000    1.000000    3.000000    3.000000    1.000000    0.000000    0.000000    0.000000    1.000000    1.000000    33.000000    6.700000    0.000000    0.000000    1.000000</code></pre><blockquote><p>准备数据：确保类别标签是+1和-1，而非1和0</p></blockquote><pre class=" language-cpp"><code class="language-cpp">def <span class="token function">loadDataSet</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token operator">:</span>    # 获取 feature 的数量<span class="token punctuation">,</span> 便于获取    numFeat <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dataArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    labelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    fr <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    <span class="token keyword">for</span> line in fr<span class="token punctuation">.</span><span class="token function">readlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>        lineArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        curLine <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>numFeat<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">:</span>            lineArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">(</span>curLine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dataArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">)</span>        labelArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">(</span>curLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dataArr<span class="token punctuation">,</span> labelArr</code></pre><blockquote><p>分析数据：统计分析</p></blockquote><p>过拟合(overfitting, 也称为过学习)</p><ul><li>发现测试错误率在达到一个最小值之后有开始上升，这种现象称为过拟合。</li></ul><p><img src="http://data.apachecn.org/img/AiLearning/ml/7.AdaBoost/%E8%BF%87%E6%8B%9F%E5%90%88.png" alt="过拟合"></p><ul><li>通俗来说：就是把一些噪音数据也拟合进去的，如下图。</li></ul><p><img src="http://data.apachecn.org/img/AiLearning/ml/7.AdaBoost/%E8%BF%87%E6%8B%9F%E5%90%88%E5%9B%BE%E8%A7%A3.png" alt="过拟合"></p><blockquote><p>训练算法：在数据上，利用 adaBoostTrainDS() 函数训练出一系列的分类器</p></blockquote><pre class=" language-cpp"><code class="language-cpp">def <span class="token function">adaBoostTrainDS</span><span class="token punctuation">(</span>dataArr<span class="token punctuation">,</span> labelArr<span class="token punctuation">,</span> numIt<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token string">""</span>"<span class="token function">adaBoostTrainDS</span><span class="token punctuation">(</span>adaBoost训练过程放大<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        dataArr   特征标签集合        labelArr  分类标签集合        numIt     实例数    Returns<span class="token operator">:</span>        weakClassArr  弱分类器的集合        aggClassEst   预测的分类结果值    <span class="token string">""</span>"    weakClassArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    m <span class="token operator">=</span> <span class="token function">shape</span><span class="token punctuation">(</span>dataArr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    # 初始化 D，设置每个样本的权重值，平均分为m份    D <span class="token operator">=</span> <span class="token function">mat</span><span class="token punctuation">(</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token punctuation">)</span>    aggClassEst <span class="token operator">=</span> <span class="token function">mat</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>numIt<span class="token punctuation">)</span><span class="token operator">:</span>        # 得到决策树的模型        bestStump<span class="token punctuation">,</span> error<span class="token punctuation">,</span> classEst <span class="token operator">=</span> <span class="token function">buildStump</span><span class="token punctuation">(</span>dataArr<span class="token punctuation">,</span> labelArr<span class="token punctuation">,</span> D<span class="token punctuation">)</span>        <span class="token macro property"># alpha目的主要是计算每一个分类器实例的权重(组合就是分类结果)</span>        # 计算每个分类器的alpha权重值        alpha <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token operator">*</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>error<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">max</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">1e-16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bestStump<span class="token punctuation">[</span><span class="token string">'alpha'</span><span class="token punctuation">]</span> <span class="token operator">=</span> alpha        <span class="token macro property"># store Stump Params in Array</span>        weakClassArr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bestStump<span class="token punctuation">)</span>        print <span class="token string">"alpha=%s, classEst=%s, bestStump=%s, error=%s "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> classEst<span class="token punctuation">.</span>T<span class="token punctuation">,</span> bestStump<span class="token punctuation">,</span> error<span class="token punctuation">)</span>        # 分类正确：乘积为<span class="token number">1</span>，不会影响结果，<span class="token operator">-</span><span class="token number">1</span>主要是下面求e的<span class="token operator">-</span>alpha次方        # 分类错误：乘积为 <span class="token operator">-</span><span class="token number">1</span>，结果会受影响，所以也乘以 <span class="token operator">-</span><span class="token number">1</span>        expon <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>alpha<span class="token operator">*</span><span class="token function">mat</span><span class="token punctuation">(</span>labelArr<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span> classEst<span class="token punctuation">)</span>        print <span class="token string">'(-1取反)预测值expon='</span><span class="token punctuation">,</span> expon<span class="token punctuation">.</span>T        # 计算e的expon次方，然后计算得到一个综合的概率的值 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span># 结果发现： 判断错误的样本，D中相对应的样本权重值会变大。        D <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> <span class="token function">exp</span><span class="token punctuation">(</span>expon<span class="token punctuation">)</span><span class="token punctuation">)</span>        D <span class="token operator">=</span> D<span class="token operator">/</span>D<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        # 预测的分类结果值，在上一轮结果的基础上，进行加和操作        print <span class="token string">'当前的分类结果：'</span><span class="token punctuation">,</span> alpha<span class="token operator">*</span>classEst<span class="token punctuation">.</span>T        aggClassEst <span class="token operator">+</span><span class="token operator">=</span> alpha<span class="token operator">*</span>classEst        print <span class="token string">"叠加后的分类结果aggClassEst: "</span><span class="token punctuation">,</span> aggClassEst<span class="token punctuation">.</span>T        <span class="token macro property"># sign 判断正为1， 0为0， 负为-1，通过最终加和的权重值，判断符号。</span>        # 结果为：错误的样本标签集合，因为是 <span class="token operator">!=</span><span class="token punctuation">,</span>那么结果就是<span class="token number">0</span> 正<span class="token punctuation">,</span> <span class="token number">1</span> 负        aggErrors <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span>aggClassEst<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">mat</span><span class="token punctuation">(</span>labelArr<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        errorRate <span class="token operator">=</span> aggErrors<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>m        <span class="token macro property"># print "total error=%s " % (errorRate)</span>        <span class="token keyword">if</span> errorRate <span class="token operator">==</span> <span class="token number">0.0</span><span class="token operator">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> weakClassArr<span class="token punctuation">,</span> aggClassEst</code></pre><pre><code>发现：alpha （模型权重）目的主要是计算每一个分类器实例的权重(加和就是分类结果)  分类的权重值：最大的值= alpha 的加和，最小值=-最大值D （样本权重）的目的是为了计算错误概率： weightedError = D.T*errArr，求最佳分类器  样本的权重值：如果一个值误判的几率越小，那么 D 的样本权重越小</code></pre><p><img src="5.png" alt="AdaBoost算法权重计算公式" title="AdaBoost算法权重计算公式"></p><blockquote><p>测试算法：我们拥有两个数据集。在不采用随机抽样的方法下，我们就会对 AdaBoost 和 Logistic 回归的结果进行完全对等的比较。</p></blockquote><pre class=" language-cpp"><code class="language-cpp">def <span class="token function">adaClassify</span><span class="token punctuation">(</span>datToClass<span class="token punctuation">,</span> classifierArr<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token string">""</span>"<span class="token function">adaClassify</span><span class="token punctuation">(</span>ada分类测试<span class="token punctuation">)</span>    Args<span class="token operator">:</span>        datToClass     多个待分类的样例        classifierArr  弱分类器的集合    Returns<span class="token operator">:</span>        <span class="token function">sign</span><span class="token punctuation">(</span>aggClassEst<span class="token punctuation">)</span> 分类结果    <span class="token string">""</span>"    <span class="token macro property"># do stuff similar to last aggClassEst in adaBoostTrainDS</span>    dataMat <span class="token operator">=</span> <span class="token function">mat</span><span class="token punctuation">(</span>datToClass<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token function">shape</span><span class="token punctuation">(</span>dataMat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    aggClassEst <span class="token operator">=</span> <span class="token function">mat</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    # 循环 多个分类器    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>classifierArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>        # 前提： 我们已经知道了最佳的分类器的实例        # 通过分类器来核算每一次的分类结果，然后通过alpha<span class="token operator">*</span>每一次的结果 得到最后的权重加和的值。        classEst <span class="token operator">=</span> <span class="token function">stumpClassify</span><span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> classifierArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dim'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> classifierArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'thresh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> classifierArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ineq'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        aggClassEst <span class="token operator">+</span><span class="token operator">=</span> classifierArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'alpha'</span><span class="token punctuation">]</span><span class="token operator">*</span>classEst    <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>aggClassEst<span class="token punctuation">)</span></code></pre><blockquote><p>使用算法：观察该例子上的错误率。不过，也可以构建一个 Web 网站，让驯马师输入马的症状然后预测马是否会死去。</p></blockquote><pre class=" language-cpp"><code class="language-cpp"># 马疝病数据集# 训练集合dataArr<span class="token punctuation">,</span> labelArr <span class="token operator">=</span> <span class="token function">loadDataSet</span><span class="token punctuation">(</span><span class="token string">"data/7.AdaBoost/horseColicTraining2.txt"</span><span class="token punctuation">)</span>weakClassArr<span class="token punctuation">,</span> aggClassEst <span class="token operator">=</span> <span class="token function">adaBoostTrainDS</span><span class="token punctuation">(</span>dataArr<span class="token punctuation">,</span> labelArr<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>print weakClassArr<span class="token punctuation">,</span> <span class="token string">'\n-----\n'</span><span class="token punctuation">,</span> aggClassEst<span class="token punctuation">.</span>T# 计算ROC下面的AUC的面积大小<span class="token function">plotROC</span><span class="token punctuation">(</span>aggClassEst<span class="token punctuation">.</span>T<span class="token punctuation">,</span> labelArr<span class="token punctuation">)</span># 测试集合dataArrTest<span class="token punctuation">,</span> labelArrTest <span class="token operator">=</span> <span class="token function">loadDataSet</span><span class="token punctuation">(</span><span class="token string">"data/7.AdaBoost/horseColicTest2.txt"</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token function">shape</span><span class="token punctuation">(</span>dataArrTest<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>predicting10 <span class="token operator">=</span> <span class="token function">adaClassify</span><span class="token punctuation">(</span>dataArrTest<span class="token punctuation">,</span> weakClassArr<span class="token punctuation">)</span>errArr <span class="token operator">=</span> <span class="token function">mat</span><span class="token punctuation">(</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span># 测试：计算总样本数，错误样本数，错误率print m<span class="token punctuation">,</span> errArr<span class="token punctuation">[</span>predicting10 <span class="token operator">!=</span> <span class="token function">mat</span><span class="token punctuation">(</span>labelArrTest<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errArr<span class="token punctuation">[</span>predicting10 <span class="token operator">!=</span> <span class="token function">mat</span><span class="token punctuation">(</span>labelArrTest<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>m</code></pre><p><a href="https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.AdaBoost/adaboost.py">完整代码地址</a>: <a href="https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.AdaBoost/adaboost.py">https://github.com/apachecn/AiLearning/blob/master/src/py2.x/ml/7.AdaBoost/adaboost.py</a></p><h4 id="要点补充"><a href="#要点补充" class="headerlink" title="要点补充"></a>要点补充</h4><blockquote><p>非均衡现象：</p></blockquote><p><code>在分类器训练时，正例数目和反例数目不相等（相差很大）。或者发生在正负例分类错误的成本不同的时候。</code></p><ul><li>判断马是否能继续生存(不可误杀)</li><li>过滤垃圾邮件(不可漏判)</li><li>不能放过传染病的人</li><li>不能随便认为别人犯罪</li></ul><p>我们有多种方法来处理这个问题： 具体可参考<a href="https://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/">此链接</a></p><p>再结合书中的方法，可以归为八大类：</p><h5 id="1-能否收集到更多的数据？"><a href="#1-能否收集到更多的数据？" class="headerlink" title="1.能否收集到更多的数据？"></a>1.能否收集到更多的数据？</h5><p>这个措施往往被人们所忽略，被认为很蠢。但是更大的数据集更能体现样本的分布，多样性。</p><h5 id="2-尝试使用其他的评价指标"><a href="#2-尝试使用其他的评价指标" class="headerlink" title="2.尝试使用其他的评价指标"></a>2.尝试使用其他的评价指标</h5><p>Accuracy 或者error rate 不能用于非均衡的数据集。这会误导人。这时候可以尝试其他的评价指标。</p><p>Confusion Matrix 混淆矩阵：使用一个表格对分类器所预测的类别与其真实的类别的样本统计，分别为：TP、FN、FP与TN。</p><p>Precision：精确度</p><p>Recall： 召回率</p><p>F1 Score (or F-Score)： 精确度和召回率的加权平均</p><p>或者使用</p><p>Kappa (Cohen’s kappa)</p><p>ROC Curves</p><blockquote><p>ROC 评估方法</p></blockquote><ul><li>ROC 曲线: 最佳的分类器应该尽可能地处于左上角</li></ul><p><img src="6.png" alt="ROC曲线"></p><ul><li><p>对不同的 ROC 曲线进行比较的一个指标是曲线下的面积(Area Unser the Curve, AUC). </p></li><li><p>AUC 给出的是分类器的平均性能值，当然它并不能完全代替对整条曲线的观察。</p></li><li><p>一个完美分类器的 AUC 为1，而随机猜测的 AUC 则为0.5。</p></li></ul><h5 id="3-尝试对样本重抽样"><a href="#3-尝试对样本重抽样" class="headerlink" title="3.尝试对样本重抽样"></a>3.尝试对样本重抽样</h5><p>欠抽样(undersampling)或者过抽样(oversampling)</p><pre><code>- 欠抽样: 意味着删除样例- 过抽样: 意味着复制样例(重复使用)</code></pre><p>对大类进行欠抽样</p><p>对小类进行过抽样</p><p>或者结合上述两种方法进行抽样</p><p>一些经验法则：</p><ul><li><p>考虑样本（超过1万、十万甚至更多）进行欠采样，即删除部分样本；</p></li><li><p>考虑样本（不足1为甚至更少）进行过采样，即添加部分样本的副本；</p></li><li><p>考虑尝试随机采样与非随机采样两种采样方法；</p></li><li><p>考虑对各类别尝试不同的采样比例，不一定是1:1</p></li><li><p>考虑同时使用过采样与欠采样&nbsp; &nbsp; &nbsp; &nbsp;</p><h5 id="4-尝试产生人工生成的样本"><a href="#4-尝试产生人工生成的样本" class="headerlink" title="4.尝试产生人工生成的样本"></a>4.尝试产生人工生成的样本</h5></li></ul><p>一种简单的方法就是随机抽样小类样本的属性（特征）来组成新的样本即属性值随机采样。你可以根据经验进行抽样，可以使用其他方式比如朴素贝叶斯方法假设各属性之间互相独立进行采样，这样便可得到更多的数据，但是无法保证属性之间的非线性关系。</p><p>当然也有系统性的算法。最常用的SMOTE(Synthetic Minority Over-Sampling Technique)。 顾名思义，这是一种over sampling（过抽样）的方式。它是产生人为的样本而不是制造样本副本。这个算法是选取2个或者2个以上相似的样本（根据距离度量 distance measure），然后每次选择其中一个样本，并随机选择一定数量的邻居样本对选择的那个样本的一个属性增加噪声(每次只处理一个属性)。这样就构造了更多的新生数据。具体可以参见<a href="http://www.jair.org/papers/paper953.html">原始论文</a>。</p><p>python实现可以查阅<a href="https://github.com/scikit-learn-contrib/imbalanced-learn">UnbalancedDataset</a></p><h5 id="5-尝试不同的算法"><a href="#5-尝试不同的算法" class="headerlink" title="5.尝试不同的算法"></a>5.尝试不同的算法</h5><p>强烈建议不要在每个问题上使用你最喜欢的算法。虽然这个算法带来较好的效果，但是它也会蒙蔽你观察数据内蕴含的其他的信息。至少你得在同一个问题上试试各种算法。具体可以参阅<a href="https://machinelearningmastery.com/why-you-should-be-spot-checking-algorithms-on-your-machine-learning-problems/">Why you should be Spot-Checking Algorithms on your Machine Learning Problems</a></p><p>比如说，决策树经常在非均衡数据集上表现良好。创建分类树时候使用基于类变量的划分规则强制使类别表达出来。如果有疑惑，可以尝试一些流行的决策树，比如, C4.5, C5.0, CART 和 Random Forrest。</p><h5 id="6-尝试使用惩罚的模型"><a href="#6-尝试使用惩罚的模型" class="headerlink" title="6.尝试使用惩罚的模型"></a>6.尝试使用惩罚的模型</h5><p>你可以使用同种算法但是以不同的角度对待这个问题。</p><p>惩罚的模型就是对于不同的分类错误给予不同的代价（惩罚）。比如对于错分的小类给予更高的代价。这种方式会使模型偏差，更加关注小类。</p><p>通常来说这种代价/惩罚或者比重在学习中算法是特定的。比如使用代价函数来实现：</p><blockquote><p>代价函数</p></blockquote><ul><li>基于代价函数的分类器决策控制：<code>TP*(-5)+FN*1+FP*50+TN*0</code></li></ul><p><img src="7.png" alt="代价函数"></p><p>这种方式叫做 cost sensitive learning，Weka 中相应的框架可以实现叫<a href="http://weka.sourceforge.net/doc.dev/weka/classifiers/meta/CostSensitiveClassifier.html">CostSensitiveClassifier</a></p><p>如果当你只能使用特定算法而且无法重抽样，或者模型效果不行，这时候使用惩罚（penalization）是可行的方法。这提供另外一种方式来“平衡”类别。但是设定惩罚函数/代价函数是比较复杂的。最好还是尝试不同的代价函数组合来得到最优效果。</p><h5 id="7-尝试使用不同的角度"><a href="#7-尝试使用不同的角度" class="headerlink" title="7.尝试使用不同的角度"></a>7.尝试使用不同的角度</h5><p>其实有很多研究关于非均衡数据。他们有自己的算法，度量，术语。</p><p>从它们的角度看看你的问题，思考你的问题，说不定会有新的想法。</p><p>两个领域您可以考虑： anomaly detection(异常值检测) 和 change detection（变化趋势检测）。</p><p>Anomaly dectection 就是检测稀有事件。 比如通过机器震动来识别机器谷中或者根据一系列系统的调用来检测恶意操作。与常规操作相比，这些事件是罕见的。</p><p>把小类想成异常类这种转变可能会帮助你想到新办法来分类数据样本。</p><p>change detection 变化趋势检测类似于异常值检测。但是他不是寻找异常值而是寻找变化或区别。比如通过使用模式或者银行交易记录来观察用户行为转变。</p><p>这些两种转变可能会给你新的方式去思考你的问题和新的技术去尝试。 &nbsp; &nbsp;</p><h5 id="8-尝试去创新"><a href="#8-尝试去创新" class="headerlink" title="8.尝试去创新"></a>8.尝试去创新</h5><p>仔细思考你的问题然后想想看如何将这问题细分为几个更切实际的小问题。</p><p>比如：</p><p>将你的大类分解成多个较小的类；</p><p>使用One Class分类器（看待成异常点检测）；</p><p>对数据集进行抽样成多个数据集，使用集成方式，训练多个分类器，然后联合这些分类器进行分类；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/22/hello-world/"/>
      <url>/2020/08/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
